




  0%|                                                                                                            | 12/11570 [00:13<2:18:43,  1.39it/s]



  0%|▏                                                                                                           | 20/11570 [00:19<2:12:55,  1.45it/s]




  0%|▎                                                                                                           | 32/11570 [00:27<2:12:51,  1.45it/s]



  0%|▍                                                                                                           | 41/11570 [00:33<2:10:16,  1.47it/s]



  0%|▍                                                                                                           | 50/11570 [00:39<2:11:07,  1.46it/s]




  1%|▌                                                                                                           | 61/11570 [00:47<2:11:14,  1.46it/s]



  1%|▋                                                                                                           | 70/11570 [00:53<2:09:24,  1.48it/s]




  1%|▊                                                                                                           | 82/11570 [01:01<2:11:07,  1.46it/s]



  1%|▊                                                                                                           | 90/11570 [01:07<2:10:54,  1.46it/s]




  1%|▉                                                                                                          | 102/11570 [01:15<2:10:29,  1.46it/s]



  1%|█                                                                                                          | 111/11570 [01:21<2:09:21,  1.48it/s]



  1%|█                                                                                                          | 120/11570 [01:27<2:08:28,  1.49it/s]




  1%|█▏                                                                                                         | 131/11570 [01:35<2:11:45,  1.45it/s]



  1%|█▎                                                                                                         | 140/11570 [01:41<2:10:16,  1.46it/s]




  1%|█▍                                                                                                         | 152/11570 [01:49<2:10:23,  1.46it/s]

  1%|█▍                                                                                                         | 158/11570 [01:53<2:09:44,  1.47it/s]Traceback (most recent call last):
  File "/data1/aman/programs/MediSOAP/train_phi2.py", line 55, in <module>
    trainer.train()
  File "/data1/aman/miniconda3/part/lib/python3.11/site-packages/trl/trainer/sft_trainer.py", line 440, in train
    output = super().train(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data1/aman/miniconda3/part/lib/python3.11/site-packages/transformers/trainer.py", line 1780, in train
    return inner_training_loop(
           ^^^^^^^^^^^^^^^^^^^^
  File "/data1/aman/miniconda3/part/lib/python3.11/site-packages/transformers/trainer.py", line 2118, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data1/aman/miniconda3/part/lib/python3.11/site-packages/transformers/trainer.py", line 3036, in training_step
    loss = self.compute_loss(model, inputs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data1/aman/miniconda3/part/lib/python3.11/site-packages/transformers/trainer.py", line 3059, in compute_loss
    outputs = model(**inputs)
              ^^^^^^^^^^^^^^^
  File "/data1/aman/miniconda3/part/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data1/aman/miniconda3/part/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data1/aman/miniconda3/part/lib/python3.11/site-packages/torch/nn/parallel/data_parallel.py", line 185, in forward
    outputs = self.parallel_apply(replicas, inputs, module_kwargs)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data1/aman/miniconda3/part/lib/python3.11/site-packages/torch/nn/parallel/data_parallel.py", line 200, in parallel_apply
    return parallel_apply(replicas, inputs, kwargs, self.device_ids[:len(replicas)])
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data1/aman/miniconda3/part/lib/python3.11/site-packages/torch/nn/parallel/parallel_apply.py", line 100, in parallel_apply
    thread.join()
  File "/data1/aman/miniconda3/part/lib/python3.11/threading.py", line 1112, in join
    self._wait_for_tstate_lock()
  File "/data1/aman/miniconda3/part/lib/python3.11/threading.py", line 1132, in _wait_for_tstate_lock
    if lock.acquire(block, timeout):
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyboardInterrupt