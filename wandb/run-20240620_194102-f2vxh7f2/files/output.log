




  0%|                                                                                                                                              | 10/11570 [00:11<2:24:26,  1.33it/s]



  0%|▏                                                                                                                                             | 19/11570 [00:18<2:14:07,  1.44it/s]




  0%|▎                                                                                                                                             | 30/11570 [00:25<2:08:55,  1.49it/s]



  0%|▍                                                                                                                                             | 39/11570 [00:31<2:11:30,  1.46it/s]



  0%|▌                                                                                                                                             | 47/11570 [00:37<2:14:09,  1.43it/s]




  1%|▋                                                                                                                                             | 59/11570 [00:45<2:12:16,  1.45it/s]



  1%|▊                                                                                                                                             | 68/11570 [00:51<2:10:33,  1.47it/s]




  1%|▉                                                                                                                                             | 80/11570 [00:59<2:10:38,  1.47it/s]



  1%|█                                                                                                                                             | 88/11570 [01:05<2:10:03,  1.47it/s]




  1%|█▏                                                                                                                                           | 100/11570 [01:13<2:09:59,  1.47it/s]



  1%|█▎                                                                                                                                           | 109/11570 [01:19<2:08:35,  1.49it/s]



  1%|█▍                                                                                                                                           | 118/11570 [01:25<2:08:44,  1.48it/s]




  1%|█▌                                                                                                                                           | 129/11570 [01:33<2:08:32,  1.48it/s]



  1%|█▋                                                                                                                                           | 138/11570 [01:39<2:08:26,  1.48it/s]



  1%|█▊                                                                                                                                           | 147/11570 [01:45<2:08:42,  1.48it/s]



  1%|█▉                                                                                                                                           | 157/11570 [01:52<2:09:29,  1.47it/s]Traceback (most recent call last):
  File "/data1/aman/programs/MediSOAP/train_phi2.py", line 102, in <module>
    trainer.train()
  File "/data1/aman/miniconda3/part/lib/python3.11/site-packages/trl/trainer/sft_trainer.py", line 440, in train
    output = super().train(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data1/aman/miniconda3/part/lib/python3.11/site-packages/transformers/trainer.py", line 1780, in train
    return inner_training_loop(
           ^^^^^^^^^^^^^^^^^^^^
  File "/data1/aman/miniconda3/part/lib/python3.11/site-packages/transformers/trainer.py", line 2118, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data1/aman/miniconda3/part/lib/python3.11/site-packages/transformers/trainer.py", line 3036, in training_step
    loss = self.compute_loss(model, inputs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data1/aman/miniconda3/part/lib/python3.11/site-packages/transformers/trainer.py", line 3059, in compute_loss
    outputs = model(**inputs)
              ^^^^^^^^^^^^^^^
  File "/data1/aman/miniconda3/part/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data1/aman/miniconda3/part/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data1/aman/miniconda3/part/lib/python3.11/site-packages/torch/nn/parallel/data_parallel.py", line 185, in forward
    outputs = self.parallel_apply(replicas, inputs, module_kwargs)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data1/aman/miniconda3/part/lib/python3.11/site-packages/torch/nn/parallel/data_parallel.py", line 200, in parallel_apply
    return parallel_apply(replicas, inputs, kwargs, self.device_ids[:len(replicas)])
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data1/aman/miniconda3/part/lib/python3.11/site-packages/torch/nn/parallel/parallel_apply.py", line 100, in parallel_apply
    thread.join()
  File "/data1/aman/miniconda3/part/lib/python3.11/threading.py", line 1112, in join
    self._wait_for_tstate_lock()
  File "/data1/aman/miniconda3/part/lib/python3.11/threading.py", line 1132, in _wait_for_tstate_lock
    if lock.acquire(block, timeout):
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyboardInterrupt